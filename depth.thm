Import "sound".

Define depth : ty -> nat -> prop by
	depth i z;
	nabla x, depth x z;
	depth (arrow A B) (s K) := exists M N, depth A M /\ depth B N /\ add M N K;
	depth (all A) K := nabla x, depth (A x) K.

Theorem depth_is_nat : forall A N, depth A N -> is_nat N.
induction on 1. intros. case H1. search. search. apply IH to H3.
	unfold. backchain add_is_nat_k. apply IH to H2. search.

Theorem depth_det : forall A M N, depth A N -> depth A M -> N = M.
induction on 1. intros. case H1.
	case H2. search. case H2. search. case H2.
	apply IH to H3 H6. apply IH to H4 H7. apply add_det to H5 H8. search.
	case H2. apply IH to H3 H4. search.

Theorem depth_open_ge_mono : forall A N M m,
	mono m -> depth m N -> depth (A m) M -> (exists Ar, A = x\ Ar) \/ lt N (s M).
induction on 3. intros. case H3.
	case H4. search. case H2. search.
	case H4. search. case H2. search.
	case H4. apply IH to _ _ H5 with A = A2. apply IH to _ _ H6 with A = A3.
		case H8. case H9. search.
			apply depth_is_nat to H6. apply add_is_nat_k to H11 H7.
			apply add_le to _ H7. apply lt_sm_sn to H14. apply lt_trans to _ H10 H15. search.
			apply depth_is_nat to H6. apply add_is_nat_k to H11 H7.
			apply add_le to _ H7. apply lt_sm_sn to H13. apply lt_trans to _ H10 H15. search.
		case H2. apply depth_det to H5 H8. apply depth_det to H6 H9.
			apply add_det to H7 H10. search.
	case H4.
		apply IH to _ _ H5 with A = x\ A2 x n1. case H6. search. search.
		case H2. apply depth_det to H5 H6. search.

Theorem depth_open_ge_A : forall A N M m, depth (all A) N -> depth (A m) M -> lt N (s M).
induction on 2. intros. case H2.
	case H3. case H1. case H4. search. case H1. case H4. search.
	case H3. case H1. case H4. search. case H1. case H4. search.
	case H3. case H1. case H7. apply add_prune[ty] to H10.
		assert depth (all A2) mr. assert depth (all A3) nr.
		apply IH to H11 H4. apply IH to H12 H5.
			apply add_is_nat to H6. apply add_total to H15 with n = nr.
			apply add_s to H6. apply add_ltn to H14 _ H16. apply add_ltm to H13 _ H10.
			backchain lt_sm_sn. apply lt_sm_sn to H18. apply lt_trans to _ H19 H20.
				apply depth_is_nat to H5. apply add_is_nat_k to _ H6. search. search.
		case H1. case H7. backchain lt_z_sn. apply depth_is_nat to H5.
			apply add_is_nat_k to _ H6. search.
	case H3. case H1. case H5. assert depth (all (x\ A2 x n1)) N. apply IH to H7 H4. search.
		case H1. case H5. backchain lt_z_sn. backchain depth_is_nat.

Theorem depth_prune : forall A N, nabla (x : ty), depth (A x) (N x) ->
	exists Nr, N = x\ Nr.
induction on 1. intros. case H1. search. search. search.
	apply IH to H2. apply IH to H3. apply add_prune_k[ty] to H4. search.
	apply IH to H2 with x = n1. search.

Theorem depth_wft_total : forall E A, wft E A -> exists N, depth A N.
induction on 1. intros. case H1. search. search.
	apply IH to H2. apply IH to H3. apply depth_is_nat to H4.
		apply add_total to H6 with n = N1. exists s k. search.
	apply IH to H2. apply depth_prune to H3. search.

Theorem sub_mono_depth_ge :
	(forall E A m M N, env E -> sub E A m -> mono m -> depth m M -> depth A N -> lt N (s M)) /\
	(forall E A m M N, env E -> sub E m A -> mono m -> depth m M -> depth A N -> lt N (s M)).
induction on 2 2. split.
	intros. case H2.
		case H4. case H5. search. case H4. case H5. search.
		case H4. case H5. case H3. apply IH1 to _ H6 _ _ _. apply IH to _ H7 _ _ _.
			apply depth_is_nat to H11. apply add_total to H18 with n = N1.
				apply add_ltm to H16 _ H19. apply add_s to H19. apply add_ltn to H17 H21 _.
				apply depth_is_nat to H9. apply add_is_nat_k to _ H10. apply lt_sm_sn to H20.
				apply lt_trans to _ H22 H25. backchain lt_sm_sn.
		case H3.
		apply sub_wft to _ H8. apply depth_wft_total to H9. apply IH to _ H8 _ _ _.
			apply depth_open_ge_A to H5 H11. apply lt_sm_sn to H12.
			backchain lt_trans. apply depth_is_nat to H4. search.
	intros. case H2.
		case H4. case H5. search. case H4. case H5. search.
		case H4. case H5. case H3. apply IH to _ H6 _ _ _. apply IH1 to _ H7 _ _ _.
			apply depth_is_nat to H11. apply add_total to H18 with n = N1.
				apply add_ltm to H16 _ H19. apply add_s to H19. apply add_ltn to H17 H21 _.
				apply depth_is_nat to H9. apply add_is_nat_k to _ H10. apply lt_sm_sn to H20.
				apply lt_trans to _ H22 H25. backchain lt_sm_sn.
		case H5. apply IH1 to _ H6 _ _ _. search.
		case H3.

Split sub_mono_depth_ge as sub_mono_depth_geR, sub_mono_depth_geL.
% Theorem sub_mono_depth_geR :
%	forall E A m M N, env E -> sub E A m -> mono m -> depth m M -> depth A N -> lt N (s M).
% Theorem sub_mono_depth_geL :
%	forall E A m M N, env E -> sub E m A -> mono m -> depth m M -> depth A N -> lt N (s M).

Theorem depth_wfta_total : forall E A, wfta E A -> exists N, depth A N.
induction on 1. intros. case H1. search. search.
	apply IH to H2. apply IH to H3. apply depth_is_nat to H4.
		apply add_total to H6 with n = N1. exists s k. search.
	apply IH to H2. apply depth_prune to H3. search.

Theorem depth_texp_geL_thm : forall aE aFE aF Exp A B a b Ex M N,
	texp aE (subt A B :: Exp) (subt a b :: Ex) -> append aF aE aFE ->
	enva aFE -> wfta aFE A -> depth A M -> depth a N -> lt M (s N).
induction on 1. intros. case H1.
	apply depth_det to H5 H6. search.
	apply depth_prune to H5. apply depth_prune to H6. apply enva_nabla_prune to _ H3.
		apply tenv_wft to H9 H8. apply tenv_enva to H9.
			apply append_assoc_inv to _ H2 with B = exvar n1 :: nil.
			apply wfta_subst to _ H4 _ with T = A, m = M1.
				backchain wfta_weaken_f with E = AB n1.
			apply depth_wfta_total to H15.
		apply IH to H10 _ _ _ _ _ with aFE = aFE n1. apply depth_open_ge_A to _ H16 with A = A.
			apply lt_sm_sn to H17. apply lt_trans to _ H18 H19.
			apply depth_is_nat to H6. search. search.
	apply depth_prune to H5. apply depth_prune to H6. apply enva_nabla_prune to _ H3.
		apply append_assoc_inv to _ H2 with B = bound n1 :: nil.
		apply IH to H7 _ _ _ _ _ with aF = AB n1. search.
Theorem depth_texp_geL : forall aE Exp A B a b Ex M N,
	texp aE (subt A B :: Exp) (subt a b :: Ex) ->
	enva aE -> wfta aE A -> depth A M -> depth a N -> lt M (s N).
intros. backchain depth_texp_geL_thm.

Theorem depth_texp_geR_thm : forall aE aFE aF Exp A B a b Ex M N,
	texp aE (subt A B :: Exp) (subt a b :: Ex) -> append aF aE aFE ->
	enva aFE -> wfta aFE B -> depth B M -> depth b N -> lt M (s N).
induction on 1. intros. case H1.
	apply depth_det to H5 H6. search.
	apply depth_prune to H5. apply depth_prune to H6. apply enva_nabla_prune to _ H3.
		apply tenv_wft to H9 H8. apply tenv_enva to H9.
			apply append_assoc_inv to _ H2 with B = exvar n1 :: nil.
			apply wfta_subst to _ H4 _ with T = B, m = M1.
				backchain wfta_weaken_f with E = AB n1.
			apply depth_wfta_total to H15.
		apply IH to H10 _ _ _ _ _ with aFE = aFE n1. apply depth_open_ge_A to _ H16 with A = B.
			apply lt_sm_sn to H17. apply lt_trans to _ H18 H19.
			apply depth_is_nat to H6. search. search.
	apply depth_prune to H5. apply depth_prune to H6. apply enva_nabla_prune to _ H3.
		apply append_assoc_inv to _ H2 with B = bound n1 :: nil.
		apply IH to H7 _ _ _ _ _ with aF = AB n1. search.
Theorem depth_texp_geR : forall aE Exp A B a b Ex M N,
	texp aE (subt A B :: Exp) (subt a b :: Ex) ->
	enva aE -> wfta aE B -> depth B M -> depth b N -> lt M (s N).
intros. backchain depth_texp_geR_thm.
