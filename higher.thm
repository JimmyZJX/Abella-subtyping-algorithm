Import "nat".

Kind ty     type.

Type i      ty.
Type all    (ty -> ty) -> ty.
Type arrow  ty -> ty -> ty.

Type bound  ty -> o.

Theorem append_prune : forall A B AB, nabla (x : ty),
	append (A x) (B x) AB -> exists FA FB, A = x\FA /\ B = x\FB.
induction on 1. intros. case H1. search.
	apply IH to H2. search.

Theorem append_prune_AB : forall A B AB, nabla (x : ty),
	append A B (AB x) -> exists FAB, AB = x\FAB.
induction on 1. intros. case H1. search.
	apply IH to H2. search.

% Well-formness for types
Define wft : olist -> ty -> prop by
	wft E i;
	nabla x, wft (E x) x := nabla x, member (bound x) (E x);
	wft E (arrow A B) := wft E A /\ wft E B;
	wft E (all A) := nabla x, wft (bound x :: E) (A x).

% Context
Define env : olist -> prop by
	env nil;
	nabla x, env (bound x :: E) := env E.

Define name : ty -> prop by
	nabla x, name x.

Theorem env_mem:
	forall E B, env E -> member B E ->
		exists X, B = bound X /\ name X.
induction on 2. intros. case H2.
	case H1. search.
	case H1. apply IH to H4 H3. search.

Theorem env_member_prune : forall E B, nabla (x : ty),
	member (B x) E -> exists Fr, B = x\Fr.
induction on 1. intros. case H1.
	search. apply IH to H2. search.

Theorem env_add_last : forall E F, nabla x,
	append E (bound x :: nil) (F x) -> env E -> env (F x).
induction on 1. intros. case H1. search.
	case H2. apply append_prune_AB to H3. unfold. backchain IH.

% Mono-types
Define mono : ty -> prop by
	mono i;
	nabla x, mono x;
	mono (arrow A B) := mono A /\ mono B.

% Subtyping
Define sub : olist -> ty -> ty -> prop by
	sub E i i;
	nabla x, sub (E x) x x := nabla x, member (bound x) (E x);
	sub E (arrow A1 A2) (arrow B1 B2) := sub E B1 A1 /\ sub E A2 B2;
	sub E A (all B) := nabla x, sub (bound x :: E) A (B x);
	sub E (all A) B := exists m, mono m /\ wft E m /\ sub E (A m) B.

% Weakening
Theorem wft_weaken : forall E F G T EG EFG,
	append E G EG -> split3 E F G EFG ->
		wft EG T ->
		env EFG ->
		wft EFG T.
induction on 3. intros. case H3.
	search.
	assert (member (bound n1) (EFG n1)). backchain split3_mem. apply append_mem_inv to _ H5.
		case H6. search. search.
		search.
	unfold. apply IH to _ _ H5 _. search. apply IH to _ _ H6 _. search.
	unfold. intros.
		backchain IH with E = (bound n1 :: E), F = F, EFG = (bound n1 :: EFG).
		backchain split3_cons.

Theorem wft_prune : forall E T, nabla (x : ty),
	wft E (T x) -> exists Fr, T = x\Fr.
induction on 1. intros. case H1.
	search.
	case H2. search.
	case H3. search. search.
	apply env_member_prune to H2.
	apply IH to H2. apply IH to H3. search.
	apply IH to H2. search.
Theorem wft_weaken_f : forall E F EF T,
	append E F EF -> wft F T -> env EF -> wft EF T.
intros. backchain wft_weaken with E = nil, F = E, G = F.

Theorem sub_weaken : forall E F G T1 T2 EG EFG,
	append E G EG -> split3 E F G EFG ->
	sub EG T1 T2 ->
	env EFG ->
	sub EFG T1 T2.
induction on 3. intros. case H3.
	search.
	assert (member (bound n1) (EFG n1)). backchain split3_mem.
		apply append_mem_inv to _ H5. case H6. search. search.
		search.
	apply IH to _ _ H5 _. apply IH to _ _ H6 _. search.
	apply IH to _ _ H5 _ with E = (bound n1 :: E), F = F, EFG = (bound n1 :: EFG).
		backchain split3_cons. search.
	apply IH to _ _ H7 _. unfold. exists m. split.
		search. backchain wft_weaken. search.
Theorem sub_weaken_f : forall E F EF T1 T2,
	append E F EF -> sub F T1 T2 -> env EF -> sub EF T1 T2.
intros. backchain sub_weaken with E = nil, F = E, G = F.

% Substitution
Theorem wft_subst : forall E T X m, env E ->
	wft E (T X) -> wft E m -> wft E (T m).
induction on 2. intros. case H2.
	case H4. search. search.
	case H4. search. search.
	case H4. apply IH to _ H5 H3 with T = T1. apply IH to _ H6 H3 with T = T2.
		search. search.
	case H4. unfold. assert exists T, T1 = x\y\ T y x. case H6.
		apply IH to _ H5 _ with X = X, m = m, T = T2 n1.
		backchain wft_weaken_f with E = bound n1 :: nil.
		search. search.

Theorem mono_subst : forall T X, nabla (x : ty), mono (T x) -> mono X -> mono (T X).
induction on 1. intros. case H1. search. search. search.
	apply IH to H3 H2. apply IH to H4 H2. search.

Theorem sub_subst : forall E A B, nabla (x : ty),
	sub (E x) (A x) (B x) -> env (E x) -> sub (E x) (A i) (B i).
induction on 1. intros. case H1. search. search. search.
	apply IH to H3 _. apply IH to H4 _. search.
	apply IH to H3 _. search.
	apply IH to H5 _. unfold.
		apply mono_subst to H3 _ with X = i.
		apply wft_subst to _ H4 _ with T = m, m = i.
		exists m i. search.

Theorem sub_refl : forall E T, env E -> wft E T -> sub E T T.
induction on 2. intros. case H2.
	search. search.
	apply IH to _ H3. apply IH to _ H4. search.
	apply IH to _ H3. search.

Theorem sub_mono_thm : forall E A B, wft E A -> wft E B -> mono A -> mono B ->
	sub E A B \/ sub E B A -> A = B.
induction on 3. intros. case H3.
	case H4. search. case H5. case H6. case H6. case H5. case H8. case H8.
	case H4. case H5. case H6. case H6. case H5. case H6. case H6. search.
		case H5. case H8. case H8.
	case H1. case H5.
		case H10. case H4. case H2.
			apply IH to _ _ H6 _ _ with B = B2.
			apply IH to _ _ H7 _ _ with B = B3.
			search.
			case H4.
		case H10. case H4. case H2.
			apply IH to _ _ H6 _ _ with B = A2.
			apply IH to _ _ H7 _ _ with B = A3.
			search.
			case H4.
